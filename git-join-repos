#!/usr/bin/env bash

set -e
IFS=$'\n\t'

self_name="$(basename $0)"
sed="sed"

if [ -z "$1" ]; then
    echo "usage: $self_name filename (where filename is in format \"name url(\n)name url\")"
    exit 99
fi

if [ "$(uname -s)" = "Darwin" ]; then
    if [ -z "$(which ssed)" ]; then
        echo "OS X detected, please ensure you have gnu sed installed. The built-in sed will not work."
        echo "To workaround this run \"brew install ssed\""
        echo "Obviously, homebrew is required for that to work"
        exit 99;
    fi
    sed="ssed"
fi


# define branches, which should survive

function config_git {
git config --global user.email "merger@example.com"
git config --global user.name "Repo Joiner"
git config --global credential.helper "cache --timeout=36000"
}

branches=(master b_20170628_R2_8_5 b_20170725_R2_8_6 MongoToMsSql EMFIPM-406-guFixes)

echo "considered branches:"
for branch in "${branches[@]}"; do
echo $branch
done

GIT_SSL_NO_VERIFY=true

data_file="$1"
name_urls="$(cat $data_file)"
repo_name=
repo_url=

function empty_repo_or_die {
    total="$(git count-objects -v | cut -d' ' -f2 | awk '{s+=$1}END{print s}')"

    if [ "$total" -ne "0" ]; then
        echo "This must be run in an empty git repository!"
        exit 98
    fi
}

function split_line {
    repo_name="${a% *}"
    repo_url="${a#* }"
}

function repo_master_to_subdir {
    git filter-branch --tag-name-filter 'cat' -f --index-filter  \
        "git ls-files -s | ${sed} \"s|\t\\\"*|&${repo_name}/|\" |
        GIT_INDEX_FILE=\$GIT_INDEX_FILE.new git update-index --index-info &&
        mv \"\$GIT_INDEX_FILE.new\" \"\$GIT_INDEX_FILE\"" HEAD

    git filter-branch --tag-name-filter 'cat' -f --msg-filter "/bin/echo -n \"${repo_name}: \" && cat"

}

config_git
empty_repo_or_die

# itrate all branches
# master,b_20171125_v222,mongo_to MySQL
for branch in "${branches[@]}"; do

echo "starting work for branch: $branch"

# iterate all repositories
for a in $name_urls; do
    split_line "$a"

    echo "starting work for repository: $repo_name"

    # checkout new branch (e.g. data-gateway)
    git checkout --orphan "$repo_name"
    git rm -qrf --ignore-unmatch .
    # add remote
    git remote add "$repo_name" "$repo_url"
    # fetch all
    git fetch "$repo_name"
    # merge origin/$branch -> local/data-gateway
    git merge "$repo_name/$branch"
    # migrate data
    repo_master_to_subdir
    # remove remote
    git remote remove "$repo_name"
done

echo "finished with first step of migration for branch: $branch"

# go to target branch
git checkout --orphan $branch
# remove all
git rm -qrf --ignore-unmatch .

for a in $name_urls; do
    split_line "$a"
    echo "goint to do final merge for repo $repo_name and branch $branch"
    # merge all prepared branches into target branch (data-gateway -> master, fw-dataprocessing -> master)
    git merge --ff -m "$repo_name: $self_name monolithic conversion merge" "$repo_name"
    echo "merged branch $repo_name -> $branch"
    git branch -D "$repo_name"
done

done
